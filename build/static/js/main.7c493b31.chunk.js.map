{"version":3,"sources":["StyledComponents/Header.jsx","StyledComponents/HeaderLogo.jsx","StyledComponents/FAIcon.jsx","StyledComponents/Main.jsx","StyledComponents/Button.jsx","StyledComponents/Title.jsx","StyledComponents/ResultsHistoryItem.jsx","StyledComponents/Paragraph.jsx","StyledComponents/Preloader.jsx","Components/ResultsHistory.jsx","StyledComponents/ResultsHistory.jsx","redux/reducers/results-history-reducer.js","ContainerComponents/ResultsHistoryContainer.jsx","redux/action-creators/results-history-action-creators.js","Components/Home.jsx","redux/reducers/user-info-reducer.js","redux/action-creators/user-info-action-creators.js","ContainerComponents/HomeContainer.jsx","Components/Question.jsx","StyledComponents/AnswerItem.jsx","StyledComponents/Answers.jsx","StyledComponents/Pages.jsx","StyledComponents/FinishComfirmWindow.jsx","Components/Test.jsx","redux/reducers/session-info-reducer.js","redux/action-creators/session-info-action-creators.js","redux/reducers/questions-reducer.js","redux/action-creators/questions-action-creators.js","ContainerComponents/TestContainer.jsx","StyledComponents/FullScreenLogo.jsx","StyledComponents/BackToHomeButton.jsx","StyledComponents/TemperImage.jsx","StyledComponents/Result.jsx","redux/store.js","StyledComponents/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","HeaderLogo","img","FAIcon","FontAwesomeIcon","props","secondary","Main","section","Button","button","disabled","primary","Title","h1","ResultHistoryItem","useState","resultNamesString","setResultNamesString","useEffect","console","log","resultNames","result","length","i","longDate","Date","date","toLocaleTimeString","month","day","year","hour","minute","second","onClick","className","Paragraph","p","bold","align","Preloader","src","ResultsHistory","isHistoryFetching","setHistoryFetching","resultsHistory","setResultsHistory","resultHistoryItems","setResultHistoryItems","isInitialized","setInitialized","history","useHistory","user_id","fetch","then","response","json","updateResultsHistory","catch","err","updateHistory","map","item","key","session_id","push","ResultHistory","initialState","resultsHistoryReducer","state","action","type","newState","ResultsHistoryContainer","connect","userInfo","dispatch","updateResultsHistoryActionCreator","Home","as","NavLink","to","userInfoReducer","updateUserInfoActionCreator","HomeContainer","updateUserInfo","Question","question_text","AnswerItem","chosen","setChosen","answer_text","Answers","answers","setAnswers","isFetching","setFetching","answerItems","setAnswerItems","getAnswers","question_id","answer","answer_id","event","answerChoiceHandler","chosenAnswerId","isChosenFetching","Pages","currentPage","totalPages","FinishConfirmWindow","showFinishConfirmation","userId","sessionId","Test","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","setChosenAnswerId","isPrevButtonDisabled","setPrevButtonDisabled","isChosenAnswerFetching","setChosenAnswerFetching","putAnswer","data","JSON","stringify","method","body","headers","finishTestHandler","setSessionId","updateSessionId","updateQuestions","undefined","getChosenAnswer","questionItems","question","questions_picture","question_picture","sessionInfoReducer","updateSessionIdActionCreator","questionsReducer","updateQuestionsActionCreator","TestContainer","sessionInfo","BackToHomeButton","TemperImage","Result","resultData","setResultData","resultDataItems","setResultDataItems","name","picture","text","getResultNamesString","reducers","combineReducers","store","createStore","About","App","isFinishConfirmationShown","setFinishConfirmationShown","isAboutShowed","showAbout","getState","alt","icon","faInfoCircle","exact","path","render","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7c493b31.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    background-color: white;\r\n    padding: 0px;\r\n    width: 100%;\r\n    display:block;\r\n    height: 100px;\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst HeaderLogo = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    position:absolute;\r\n    top: -30px;\r\n    left: 20px;\r\n`;\r\n\r\nexport default HeaderLogo;","import styled from \"styled-components\";\r\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FAIcon = styled(FontAwesomeIcon)`\r\n    font-size: 30px;\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    position: absolute;\r\n    top: 30px;\r\n    right: 40px;\r\n    \r\n    :hover{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default FAIcon;","import styled from \"styled-components\";\r\n\r\nconst Main = styled.section`\r\n    width: 1000px;\r\n    margin: 20px auto;\r\n    background-color: white;\r\n    padding: 20px;\r\n    display: block;\r\n    text-align: center;\r\n    border: 1px pink solid;\r\n`;\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    padding: 18px 60px;\r\n    background-color: ${props => props.disabled ? '#a3a3a3' : props.primary ? '#2E753E' : props.secondary ? '#FD759C' : 'white'};\r\n    color: ${props => props.disabled ? 'black' : props.primary || props.secondary ? 'white' : '#2E753E'};\r\n    border: 1px ${props => props.disabled ? 'black' : props.secondary ? '#FD759C' : '#2E753E'} solid;\r\n    display: inline-block;\r\n    font-size:20px;\r\n    text-decoration: none;\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    :active{\r\n        box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n`;\r\n\r\nexport default Title;","import React, {useDebugValue, useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = (props) => {\r\n\r\n    const [resultNamesString, setResultNamesString] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        console.log(\"Props from Results History Item\");\r\n        console.log(props);\r\n        let resultNames = \"\";\r\n        if (props.result.length > 0) {\r\n            resultNames += props.result[0];\r\n            for (let i = 1; i < props.result.length; i++){\r\n                resultNames += \" + \" + props.result[i];\r\n            }\r\n        }\r\n        setResultNamesString(resultNames);\r\n    }, [props]);\r\n\r\n\r\n    let options = {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    };\r\n    let date = new Date(props.date);\r\n    let longDate = date.toLocaleTimeString('ru-RU', options);\r\n\r\n    return (\r\n        <div onClick={props.onClick}>\r\n            <div className={props.className}>\r\n                <span className={\"date\"}>\r\n                    {longDate}\r\n                </span>\r\n                <br/>\r\n                <span className={\"result_name\"}>\r\n                    {resultNamesString}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ResultHistoryItem = styled(Item)`\r\n    \r\n    border:1px ${props => props.primary ? '#2E753E' : '#FD759C'} solid;\r\n    padding: 20px 40px;\r\n    font-size: 17px;\r\n    border-radius: 15px;\r\n    display: inline-block;\r\n    margin: 10px auto;\r\n    .date{\r\n        color: '#4d4d4d';\r\n        font-style: italic;\r\n    }\r\n    .result_name{\r\n        font-weight:bold;\r\n    }\r\n    :hover{\r\n        background-color: ${props => props.primary ? '#2E753E' : '#FD759C'};\r\n        color: white;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst render = () => (\r\n    <ResultHistoryItem/>\r\n)\r\n\r\nexport default ResultHistoryItem","import styled from \"styled-components\";\r\n\r\nconst Paragraph = styled.p`\r\n    border: 1px ${props => props.secondary? '#FD759C': '#2E753E'} solid;\r\n    background-color: ${props => props.primary?'#2E753E':props.secondary&&props.bold?'#FD759C':'white'};\r\n    color: ${props => props.primary || props.secondary&&props.bold?'white':'#4d4d4d'};\r\n    font-size: 18px;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n    text-align: ${props => props.align === 'left'?'left':props.align === 'right'?'right':'center'};\r\n`;\r\n\r\nexport default Paragraph;","import styled from \"styled-components\";\r\nimport Header from \"./Header\";\r\nimport React from \"react\";\r\n\r\nconst LoaderImg = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={props.className} {...props} src=\"/images/preloader.svg\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Preloader = styled(LoaderImg)`\r\n    width: 150px;\r\n    display: inline-block;\r\n    \r\n`;\r\n\r\nexport default Preloader;","import React, {useEffect, useState} from \"react\";\r\nimport ResultHistoryItem from \"../StyledComponents/ResultsHistoryItem\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst ResultsHistory = (props) => {\r\n    const [isHistoryFetching, setHistoryFetching] = useState(false);\r\n    const [resultsHistory, setResultsHistory] = useState([]);\r\n    const [resultHistoryItems, setResultHistoryItems] = useState([]);\r\n    const [isInitialized, setInitialized] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const updateHistory = () => {\r\n        if (!isInitialized) {\r\n            setHistoryFetching(true);\r\n            console.log('fetching /api/sessions/' + props.user_id);\r\n            return fetch('/api/sessions/' + props.user_id)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    if (result) {\r\n                        props.updateResultsHistory(result);\r\n                    }\r\n                    console.log(result);\r\n                    setHistoryFetching(false);\r\n                    //setResultsHistory([...result]);\r\n                    return result;\r\n\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setResultsHistory(props.resultsHistory);\r\n    }, [props.resultsHistory]);\r\n\r\n\r\n    useEffect(() => {\r\n        updateHistory()\r\n    }, [isInitialized]);\r\n    useEffect(() => {\r\n        console.log(\"Getting history items\");\r\n        console.log(resultsHistory);\r\n        if (resultsHistory.length > 0) {\r\n            setResultHistoryItems(resultsHistory.map(item => <ResultHistoryItem {...item}\r\n                                                                                key={item.session_id}\r\n                                                                                onClick={() => {\r\n                                                                                    history.push('/result/' + item.session_id);\r\n                                                                                }}\r\n            />));\r\n            setInitialized(true);\r\n            console.log(resultHistoryItems);\r\n        } else {\r\n            setResultHistoryItems(\r\n                <Paragraph>\r\n                    Ваша история пуста. Вы еще ни разу не проходили тест.\r\n                </Paragraph>);\r\n        }\r\n    }, [resultsHistory, props.resultsHistory]);\r\n\r\n    return (\r\n        <div>\r\n            {isHistoryFetching ? <Preloader/> : resultHistoryItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsHistory;","import styled from \"styled-components\";\r\nimport ResultsHistory from \"../Components/ResultsHistory\";\r\n\r\n\r\nconst ResultHistory = styled(ResultsHistory)`\r\n`;\r\n\r\nexport default ResultHistory;","export const UPDATE_RESULTS_HISTORY = 'UPDATE-RESULTS-HISTORY';\r\n\r\nconst initialState = [\r\n];\r\n\r\nconst resultsHistoryReducer = (state = initialState, action) => {\r\n    let stateCopy = [...state];\r\n    switch(action.type){\r\n        case UPDATE_RESULTS_HISTORY:\r\n            return action.newState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default resultsHistoryReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ResultsHistory from \"../StyledComponents/ResultsHistory\";\r\nimport {updateResultsHistoryActionCreator} from \"../redux/action-creators/results-history-action-creators\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user_id:state.userInfo.user_id,\r\n        resultsHistory:state.resultsHistory,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateResultsHistory: (newState) => {\r\n            dispatch(updateResultsHistoryActionCreator(newState));\r\n        }\r\n    };\r\n};\r\n\r\nconst ResultsHistoryContainer = connect(mapStateToProps, mapDispatchToProps)(ResultsHistory);\r\n\r\n\r\n\r\nexport default ResultsHistoryContainer;","import {UPDATE_RESULTS_HISTORY} from \"../reducers/results-history-reducer\";\r\n\r\nexport const updateResultsHistoryActionCreator = (newState) => {\r\n    return {\r\n        type: UPDATE_RESULTS_HISTORY,\r\n        newState\r\n    }\r\n};","import React, {useState} from \"react\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Title from \"../StyledComponents/Title\";\r\nimport ResultsHistoryContainer from \"../ContainerComponents/ResultsHistoryContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n    const startSession = () => {\r\n        return fetch('/api/session/start/' + props.user_id)\r\n            .then(response => {\r\n                console.log(response);\r\n                return response.json()})\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const runTestHandler = () => {\r\n        startSession();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary as={NavLink} to={'/test/'} onClick={runTestHandler}>\r\n                Пройти тест\r\n            </Button>\r\n            <Title secondary>\r\n                История\r\n            </Title>\r\n            <ResultsHistoryContainer user_id={props.user_id} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","export const UPDATE_USER_INFO = 'UPDATE-USER-INFO';\r\n\r\nconst initialState = {\r\n    user_id: '1'\r\n}\r\n\r\nconst userInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_USER_INFO:\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userInfoReducer;","import {UPDATE_USER_INFO} from \"../reducers/user-info-reducer\";\r\n\r\n\r\nconst updateUserInfoActionCreator = (userInfo) => {\r\n    return {\r\n        type: UPDATE_USER_INFO,\r\n        userInfo: {\r\n            user_id: userInfo.user_id\r\n        }\r\n    };\r\n};\r\n\r\nexport default updateUserInfoActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Home from \"../Components/Home\";\r\nimport updateUserInfoActionCreator from \"../redux/action-creators/user-info-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.userInfo\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateUserInfo: (userInfo) => {\r\n            dispatch(updateUserInfoActionCreator(userInfo));\r\n        }\r\n    }\r\n};\r\n\r\nconst HomeContainer = connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <Paragraph primary>\r\n            {props.question_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from \"styled-components\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Paragraph from \"./Paragraph\";\r\n\r\nlet AnswerItem = (props) => {\r\n    let [chosen, setChosen] = useState(false);\r\n    useEffect(()=> {\r\n        setChosen(props.chosen);\r\n        console.log(props);\r\n    }, [props.chosen]);\r\n    return (\r\n        <Paragraph secondary bold={chosen} className={props.className} onClick = {props.onClick} >\r\n            {props.answer_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nAnswerItem = styled(AnswerItem)`\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    \r\n`;\r\n\r\nexport default AnswerItem;","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AnswerItem from \"./AnswerItem\";\r\nimport Preloader from \"./Preloader\";\r\n\r\nlet Answers = (props) => {\r\n    let [answers, setAnswers] = useState([]);\r\n    let [isFetching, setFetching] = useState(true);\r\n    let [answerItems, setAnswerItems] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getAnswers(props.question_id)\r\n\r\n    }, [props.question_id]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (answers) {\r\n            setAnswerItems(answers.map(answer => {\r\n                return <AnswerItem answer_id={answer.answer_id} answer_text={answer.answer_text}\r\n                                   onClick={(event) => {\r\n                                       props.answerChoiceHandler(answer.answer_id);\r\n                                       console.log(answer.answer_id);\r\n                                   }}\r\n                                   chosen={answer.answer_id === +props.chosenAnswerId}\r\n                />\r\n            }))\r\n        } else {\r\n            setAnswerItems(null);\r\n        }\r\n    }, [answers, props.chosenAnswerId]);\r\n\r\n    const getAnswers = (question_id) => {\r\n        console.log(\"props\");\r\n        console.log(props);\r\n        console.log(\"Fetching answers for question \" + question_id);\r\n        if (question_id) {\r\n            return fetch('/api/answers/' + question_id)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log(result);\r\n                    setAnswers(result);\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isFetching||props.isChosenFetching ? <Preloader/> : answerItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nAnswers = styled(Answers)`\r\n\r\n`;\r\n\r\nexport default Answers;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nlet Pages = (props) => {\r\n    return <div className={props.className}>\r\n        {props.currentPage}/{props.totalPages}\r\n    </div>\r\n};\r\n\r\nPages = styled(Pages)`\r\n    padding: 15px;\r\n    color: '#5e5e5e';\r\n    font-style:italic;\r\n    text-align: left;\r\n`;\r\n\r\nexport default Pages;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nlet FinishConfirmWindow = props => {\r\n\r\n    const history = useHistory();\r\n\r\n    const yesHandler = () => {\r\n        props.showFinishConfirmation(false);\r\n        fetch('/api/result/calculate/' + props.userId + \"/\"  + props.sessionId)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n                history.push('/result/' + props.sessionId)\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const noHandler = () => {\r\n        props.showFinishConfirmation(false);\r\n    };\r\n\r\n    const getAnswers = () => {\r\n        return fetch('/api/history/answers/' + props.sessionId)\r\n            .then(response => response.json())\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Couldn't get answers from the server\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className={\"wrapper\"}>\r\n                <p> Вы уверены, что хотите завершить тестирование?</p>\r\n                <Button secondary className={\"no\"} onClick={noHandler}>\r\n                    Нет\r\n                </Button>\r\n                <Button  primary className={\"yes\"} onClick={yesHandler}>\r\n                    Да\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nFinishConfirmWindow = styled(FinishConfirmWindow)`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    background-color: rgba(33, 33, 33, 0.81);    \r\n    .wrapper{\r\n        background-color: white;\r\n        border: 1px black solid;\r\n        width: 800px;\r\n        margin: 200px auto;\r\n        padding: 20px;\r\n        text-align: center;\r\n        \r\n        .yes{\r\n            border: none;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default FinishConfirmWindow;","import React, {useEffect, useState} from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Question from \"./Question\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\nimport Answers from \"../StyledComponents/Answers\";\r\nimport Pages from \"../StyledComponents/Pages\";\r\nimport FinishConfirmWindow from \"../StyledComponents/FinishComfirmWindow\";\r\n\r\nconst Test = (props) => {\r\n\r\n\r\n        let [isLastQuestion, setIsLastQuestion] = useState(false);\r\n        let [questions, setQuestions] = useState([]);\r\n        let [isFetching, setFetching] = useState(false);\r\n        let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n        let [chosenAnswerId, setChosenAnswerId] = useState(null);\r\n        let [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\r\n        let [isChosenAnswerFetching, setChosenAnswerFetching] = useState(false);\r\n\r\n        const isTheLastQuestion = () => {\r\n            return currentQuestionIndex === questions.length - 1;\r\n        }\r\n\r\n\r\n        const getChosenAnswer = (question_id) => {\r\n            setChosenAnswerFetching(true);\r\n            console.log(\"Trying to fetch chosen answers. Session id :\" + props.sessionId +\r\n                ', chosen answer id: ' + chosenAnswerId +\r\n                'question id: ' + question_id\r\n            );\r\n            if (+props.sessionId && !chosenAnswerId) {\r\n                console.log(\"Fetching chosen answer\");\r\n                return fetch('/api/history/answers/' + props.sessionId + '/' + question_id)\r\n                    .then(response => response.json())\r\n                    .then(result => {\r\n                        console.log(\"Got the chosen answer from history\");\r\n                        console.log(result);\r\n                        if (result.length > 0) {\r\n                            setChosenAnswerId(result[0].answer_id);\r\n                        }\r\n                        setChosenAnswerFetching(false);\r\n                        return result;\r\n                    })\r\n                    .catch(err => {\r\n                        console.log('Couldn\\'t get the chosen answer from the server');\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n        const getSessionId = () => {\r\n            setFetching(true);\r\n            console.log('/api/session/' + props.user_id);\r\n            return fetch('/api/session/' + props.user_id)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    if (result)\r\n                        props.updateSessionId(result.session_id);\r\n                    setFetching(false);\r\n                    return result.session_id;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const getQuestions = () => {\r\n            setFetching(true);\r\n            console.log('Getting questions');\r\n            return fetch('/api/questions')\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log('questions result');\r\n                    console.log(result);\r\n                    if (result) {\r\n                        props.updateQuestions(result);\r\n                        setQuestions(result);\r\n                    }\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const handleAnswerChoice = (answer_id) => {\r\n            setChosenAnswerId(answer_id);\r\n        };\r\n\r\n        const putAnswer = (data) => {\r\n            console.log('client put body');\r\n            console.log(JSON.stringify(data));\r\n            fetch('/api/answer',\r\n                {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify(data),\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n\r\n        const nextQuestionHandler = () => {\r\n            if (questions){\r\n                if (chosenAnswerId) {\r\n                    putAnswer({\r\n                        session_id: props.session_id,\r\n                        answer_id: chosenAnswerId,\r\n                        question_id: questions[currentQuestionIndex].question_id\r\n                    });\r\n                }\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n                else{\r\n                    finishTestHandler();\r\n                }\r\n            }\r\n\r\n\r\n        };\r\n        const prevQuestionHandler = () => {\r\n            if (questions)\r\n                if (currentQuestionIndex > 0) {\r\n                    if (chosenAnswerId) {\r\n                        putAnswer({\r\n                            session_id: props.session_id,\r\n                            answer_id: chosenAnswerId,\r\n                            question_id: questions[currentQuestionIndex].question_id\r\n                        });\r\n                    }\r\n                    setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n        };\r\n\r\n        const finishTestHandler = () => {\r\n\r\n            props.showFinishConfirmation(true);\r\n        };\r\n\r\n        useEffect(() => {\r\n            props.setSessionId(props.session_id);\r\n        }, [props.session_id]);\r\n\r\n        useEffect(() => {\r\n            setPrevButtonDisabled(currentQuestionIndex === 0);\r\n        }, [currentQuestionIndex]);\r\n\r\n        useEffect(() => {\r\n            getSessionId();\r\n            getQuestions();\r\n        }, [props]);\r\n\r\n\r\n        useEffect(() => {\r\n            if (questions.length > 0 && currentQuestionIndex !== undefined) {\r\n                console.log('Getting chosen answer')\r\n                console.log(questions);\r\n                console.log(currentQuestionIndex);\r\n                getChosenAnswer(questions[currentQuestionIndex].question_id);\r\n            }\r\n\r\n        }, [props.sessionId, currentQuestionIndex, questions]);\r\n\r\n        let questionItems = questions.map(question => <Question primary session_id={props.session_id}\r\n                                                                question_id={question.question_id}\r\n                                                                question_text={question.question_text}\r\n                                                                questions_picture={question.question_picture}/>)\r\n\r\n        return (\r\n            <div>\r\n                {/*<Switch>\r\n                <Route path={'/:question_id'} render={(p) => <Question session_id = {props.session_id} question_id={p.match.params.question_id} lastQuestionHandler={setIsLastQuestion} />}/>\r\n            </Switch>*/}\r\n\r\n                {isFetching ? <Preloader/> :\r\n                    <div>\r\n                        <Pages currentPage={currentQuestionIndex + 1} totalPages={questions.length}/>\r\n                        {questionItems[currentQuestionIndex]}\r\n                    </div>}\r\n                <Answers question_id={questions.length > 0 ? questions[currentQuestionIndex].question_id : \"\"}\r\n                         answerChoiceHandler={handleAnswerChoice}\r\n                         chosenAnswerId={chosenAnswerId} isChosenFetching={isChosenAnswerFetching}  />\r\n                {isFetching ? null :\r\n                    <div>\r\n                        <Button onClick={prevQuestionHandler} disabled={isPrevButtonDisabled}>\r\n                            Назад\r\n                        </Button>\r\n                        <Button primary={isTheLastQuestion()}\r\n                                onClick={nextQuestionHandler}>\r\n                            {currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Вперед'}\r\n                        </Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Test;","export const UPDATE_SESSION_ID = 'UPDATE-SESSION-ID';\r\n\r\nconst initialState = {\r\n    session_id:null\r\n};\r\n\r\nconst sessionInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_SESSION_ID:\r\n            return {\r\n                session_id: action.session_id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sessionInfoReducer;","import {UPDATE_SESSION_ID} from \"../reducers/session-info-reducer\";\r\n\r\nconst updateSessionIdActionCreator = (session_id) => {\r\n    return {\r\n        type: UPDATE_SESSION_ID,\r\n        session_id\r\n    }\r\n};\r\n\r\nexport default updateSessionIdActionCreator;","export const UPDATE_QUESTIONS = 'UPDATE-QUESTIONS';\r\n\r\nconst questionsReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case UPDATE_QUESTIONS:\r\n            return action.questions;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default questionsReducer;","import {UPDATE_QUESTIONS} from \"../reducers/questions-reducer\";\r\n\r\nconst updateQuestionsActionCreator = (questions) => {\r\n    return{\r\n        type: UPDATE_QUESTIONS,\r\n        questions\r\n    }\r\n};\r\n\r\nexport default updateQuestionsActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Test from \"../Components/Test\";\r\nimport updateSessionIdActionCreator from \"../redux/action-creators/session-info-action-creators\";\r\nimport updateQuestionsActionCreator from \"../redux/action-creators/questions-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        session_id: state.sessionInfo.session_id,\r\n        user_id: state.userInfo.user_id\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateSessionId: (session_id) => {\r\n            dispatch(updateSessionIdActionCreator(session_id));\r\n        },\r\n        updateQuestions: (questions) => {\r\n            dispatch(updateQuestionsActionCreator(questions));\r\n        },\r\n    };\r\n};\r\n\r\nconst TestContainer = connect(mapStateToProps, mapDispatchToProps)(Test);\r\n\r\nexport default TestContainer;","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Logo = (props) => {\r\n    return(\r\n        <img className={props.className} src={'/images/Tempermeter_loader.svg'} />\r\n    );\r\n};\r\n\r\nconst FullScreenLogo = styled(Logo)`\r\n    width:100%;\r\n`;\r\n\r\nexport default FullScreenLogo;","import styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\n\r\nconst BackToHomeButton = styled(Button)`\r\n    width: 100%;\r\n`;\r\n\r\nexport default BackToHomeButton;","import styled from \"styled-components\";\r\n\r\nconst TemperImage = styled.img`\r\n    width: 600px;\r\n`;\r\n\r\nexport default TemperImage;","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Preloader from \"./Preloader\";\r\nimport Paragraph from \"./Paragraph\";\r\nimport BackToHomeButton from \"./BackToHomeButton\";\r\nimport TemperImage from \"./TemperImage\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nlet Result = (props) => {\r\n    const [isFetching, setFetching] = useState(true);\r\n    const [resultData, setResultData] = useState([]);\r\n    const [resultDataItems, setResultDataItems] = useState(null);\r\n    const history = useHistory();\r\n\r\n\r\n    const getResultNamesString = (result) => {\r\n        let resultNames = \"\";\r\n        if (result) {\r\n            resultNames += result[0].name;\r\n            for (let i = 1; i < result.length; i++) {\r\n                resultNames += \" + \" + result[i].name;\r\n            }\r\n        }\r\n        return resultNames;\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFetching(true);\r\n        console.log(props.sessionId);\r\n        fetch('/api/result/' + props.sessionId)\r\n            .then(response => {\r\n                let result = response.json();\r\n                console.log(result);\r\n                return result;\r\n            })\r\n            .then(result => {\r\n                console.log(\"Got Result Data\");\r\n                console.log(result);\r\n                setResultData(result);\r\n                setFetching(false);\r\n                return result;\r\n            })\r\n            .then(result => {\r\n                if (result) {\r\n                    setResultDataItems(result.map(result => {\r\n                        return (\r\n                            <>\r\n                                <div>\r\n                                    <b>{result.name}</b>\r\n                                </div>\r\n                                <TemperImage src={result.picture}/>\r\n                                <Paragraph align={'left'}>\r\n                                    {result.text}\r\n                                </Paragraph>\r\n                            </>\r\n                        );\r\n                    }));\r\n                    setFetching(false);\r\n                    return result;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Couldn't fetch the result data\");\r\n                console.log(err);\r\n            })\r\n    }, [props]);\r\n\r\n\r\nreturn (\r\n    <div>\r\n        <BackToHomeButton primary onClick={() => history.push(\"/\")} >\r\n            Вернуться на главную\r\n        </BackToHomeButton>\r\n        {isFetching ? <Preloader/> :\r\n            <div>\r\n                <Paragraph>`\r\n                    Вы - {getResultNamesString(resultData)}\r\n                    <br/>\r\n                    {resultDataItems}\r\n                </Paragraph>\r\n            </div>}\r\n    </div>\r\n);\r\n}\r\n;\r\n\r\nResult = styled(Result)`\r\n\r\n`;\r\n\r\nexport default Result;","import {combineReducers, createStore} from \"redux\";\r\nimport resultsHistoryReducer from \"./reducers/results-history-reducer\";\r\nimport userInfoReducer from \"./reducers/user-info-reducer\";\r\nimport sessionInfoReducer from \"./reducers/session-info-reducer\";\r\nimport questionsReducer from \"./reducers/questions-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    resultsHistory: resultsHistoryReducer,\r\n    userInfo: userInfoReducer,\r\n    sessionInfo: sessionInfoReducer,\r\n    questions: questionsReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Paragraph from \"./Paragraph\";\r\n\r\nlet About = (props) => {\r\n    return (\r\n        <div {...props}>\r\n            <Paragraph className={'info'}>\r\n                Известно, что все люди по разному реагируют на события и испытывают разные эмоции при одних и тех же\r\n                событиях.\r\n                <br/>В наших генах записано множество информации. В том числе, там записаны особенности работы нервной системы.\r\n                <br/>В зависимости от свойств нервной системы, присущих человеку, можно говорить о том, каким темпераментом\r\n                он обладает.\r\n                <br/>\r\n                <br/>Данный тест поможет вам определить свой личный темперамент.\r\n                <br/>\r\n                <br/><i>Приложение создано в качестве индивидуального домашнего задания по курсу Системы Управления Контентом.\r\n                <br/>Матмех, СПбГУ, 2020 год.</i>\r\n                <br/>\r\n                <br/>По всем вопросам можете писать на <b>почту</b> katherine.inspiration@gmail.com\r\n            </Paragraph>\r\n        </div>\r\n    );\r\n};\r\n\r\nAbout = styled(About)`\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(33, 33, 33, 0.81);\r\n    position: fixed;\r\n    .info{\r\n        padding: 30px;\r\n        margin: 110px auto;\r\n        width: 800px;\r\n    }\r\n    \r\n`;\r\n\r\nexport default About;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Header from \"./StyledComponents/Header\";\r\nimport HeaderLogo from \"./StyledComponents/HeaderLogo\";\r\nimport FAIcon from \"./StyledComponents/FAIcon\";\r\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Main from \"./StyledComponents/Main\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomeContainer from \"./ContainerComponents/HomeContainer\";\r\nimport TestContainer from \"./ContainerComponents/TestContainer\";\r\nimport Preloader from \"./StyledComponents/Preloader\";\r\nimport FullScreenLogo from \"./StyledComponents/FullScreenLogo\";\r\nimport FinishConfirmWindow from \"./StyledComponents/FinishComfirmWindow\";\r\nimport Result from \"./StyledComponents/Result\";\r\nimport store from \"./redux/store\";\r\nimport About from \"./StyledComponents/About\";\r\n\r\nfunction App(props) {\r\n\r\n    const [isFinishConfirmationShown, setFinishConfirmationShown] = useState(false);\r\n    const [sessionId, setSessionId] = useState(null);\r\n    const [isAboutShowed, showAbout] = useState(false);\r\n\r\n\r\n    return (\r\n        <div onClick={() => {\r\n            if (isAboutShowed){\r\n                showAbout(false);\r\n            }\r\n        }}>\r\n\r\n            {isFinishConfirmationShown ? <FinishConfirmWindow showFinishConfirmation={setFinishConfirmationShown}\r\n                                                              sessionId={sessionId}\r\n                                                              userId={store.getState().userInfo.user_id}\r\n\r\n            /> : null}\r\n            {isAboutShowed? <About />:null}\r\n            <Header>\r\n                <HeaderLogo src=\"images/Tempermeter-logo.svg\" alt={\"Tempermeter logo\"}/>\r\n                <FAIcon icon={faInfoCircle} onClick={() => {showAbout(true);}} />\r\n\r\n            </Header>\r\n            <Main>\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={() => <HomeContainer/>}/>\r\n                    <Route exact path={\"/test/\"} render={() => <TestContainer\r\n                        showFinishConfirmation={setFinishConfirmationShown}\r\n                        setSessionId={setSessionId}\r\n                        sessionId={sessionId}\r\n                    />}/>\r\n                    <Route exact path={'/result/:session_id'} render={(p) => <Result sessionId={p.match.params.session_id} />} />\r\n                    <Route render={() => <div>The page isn't found</div>} />\r\n                </Switch>\r\n            </Main>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store = {store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}