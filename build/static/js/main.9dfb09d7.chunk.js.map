{"version":3,"sources":["StyledComponents/Header.jsx","StyledComponents/HeaderLogo.jsx","StyledComponents/FAIcon.jsx","StyledComponents/Main.jsx","StyledComponents/Button.jsx","StyledComponents/Title.jsx","StyledComponents/ResultsHistoryItem.jsx","StyledComponents/Paragraph.jsx","StyledComponents/Preloader.jsx","Components/ResultsHistory.jsx","StyledComponents/ResultsHistory.jsx","redux/reducers/results-history-reducer.js","ContainerComponents/ResultsHistoryContainer.jsx","redux/action-creators/results-history-action-creators.js","Components/Home.jsx","redux/reducers/user-info-reducer.js","redux/action-creators/user-info-action-creators.js","ContainerComponents/HomeContainer.jsx","Components/Question.jsx","StyledComponents/AnswerItem.jsx","StyledComponents/Answers.jsx","StyledComponents/Pages.jsx","Components/Test.jsx","redux/reducers/session-info-reducer.js","redux/action-creators/session-info-action-creators.js","redux/reducers/questions-reducer.js","redux/action-creators/questions-action-creators.js","ContainerComponents/TestContainer.jsx","StyledComponents/FinishComfirmWindow.jsx","StyledComponents/BackToHomeButton.jsx","StyledComponents/TemperImage.jsx","Classes/Attachment.js","Classes/PostTopicRequest.js","credentials.js","StyledComponents/ShareView.jsx","Functions/okapi.js","StyledComponents/Result.jsx","redux/store.js","StyledComponents/About.jsx","Components/Auth.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","HeaderLogo","img","FAIcon","FontAwesomeIcon","props","secondary","Main","section","Button","button","disabled","primary","Title","h1","ResultHistoryItem","useState","resultNamesString","setResultNamesString","useEffect","console","log","resultNames","result","length","i","longDate","Date","date","toLocaleTimeString","month","day","year","hour","minute","second","onClick","className","Paragraph","p","bold","align","Preloader","alt","src","ResultsHistory","isHistoryFetching","setHistoryFetching","resultsHistory","setResultsHistory","resultHistoryItems","setResultHistoryItems","isInitialized","setInitialized","updateHistory","useCallback","user_id","fetch","then","response","json","updateResultsHistory","catch","err","map","item","key","session_id","history","push","ResultHistory","initialState","resultsHistoryReducer","state","action","type","newState","ResultsHistoryContainer","connect","dispatch","updateResultsHistoryActionCreator","Home","as","NavLink","to","userInfoReducer","userInfo","updateUserInfoActionCreator","HomeContainer","updateUserInfo","Question","question_text","AnswerItem","chosen","setChosen","answer_text","Answers","answers","setAnswers","isFetching","setFetching","answerItems","setAnswerItems","getAnswers","question_id","answer","answer_id","event","answerChoiceHandler","chosenAnswerId","isChosenFetching","Pages","currentPage","totalPages","Test","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","setChosenAnswerId","isPrevButtonDisabled","setPrevButtonDisabled","isChosenAnswerFetching","setChosenAnswerFetching","handleAnswerChoice","putAnswer","data","JSON","stringify","method","body","headers","finishTestHandler","showFinishConfirmation","setSessionId","updateSessionId","updateQuestions","undefined","sessionId","getChosenAnswer","questionItems","question","questions_picture","question_picture","sessionInfoReducer","updateSessionIdActionCreator","questionsReducer","updateQuestionsActionCreator","TestContainer","sessionInfo","FinishConfirmWindow","useHistory","userId","BackToHomeButton","TemperImage","Attachment","text","this","media","PostTopicRequest","require","topicData","sessionKey","sessionSecretKey","sig","attachment","application_key","format","session_key","ShareView","shareURL","setShareURL","url","webServer","request","requestURL","params","URLSearchParams","Object","entries","value","append","getPostMediatopicURL","mediatopicText","style","textAlign","alert","Result","resultData","setResultData","resultDataItems","setResultDataItems","setMediatopicText","showShareIframe","setShowShareIframe","name","picture","getResultNamesString","reducers","combineReducers","store","createStore","About","Auth","App","isFinishConfirmationShown","setFinishConfirmationShown","isAboutShowed","showAbout","setAuthInfo","setSessionInfo","hashParams","window","location","hash","substring","split","reduce","current","currentParam","search","accum","pair","height","overflowY","logged_user_id","icon","faInfoCircle","exact","path","render","match","session_secret_key","web_server","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9dfb09d7.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    background-color: white;\r\n    padding: 0px;\r\n    width: 100%;\r\n    display:block;\r\n    height: 100px;\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst HeaderLogo = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    position:absolute;\r\n    top: -30px;\r\n    left: 20px;\r\n`;\r\n\r\nexport default HeaderLogo;","import styled from \"styled-components\";\r\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FAIcon = styled(FontAwesomeIcon)`\r\n    font-size: 30px;\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    position: absolute;\r\n    top: 30px;\r\n    right: 40px;\r\n    \r\n    :hover{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default FAIcon;","import styled from \"styled-components\";\r\n\r\nconst Main = styled.section`\r\n    width: 1000px;\r\n    margin: 20px auto;\r\n    background-color: white;\r\n    padding: 20px;\r\n    display: block;\r\n    text-align: center;\r\n    border: 1px pink solid;\r\n`;\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    padding: 18px 60px;\r\n    background-color: ${props => props.disabled ? '#a3a3a3' : props.primary ? '#2E753E' : props.secondary ? '#FD759C' : 'white'};\r\n    color: ${props => props.disabled ? 'black' : props.primary || props.secondary ? 'white' : '#2E753E'};\r\n    border: 1px ${props => props.disabled ? 'black' : props.secondary ? '#FD759C' : '#2E753E'} solid;\r\n    display: inline-block;\r\n    font-size:20px;\r\n    text-decoration: none;\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    :active{\r\n        box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n`;\r\n\r\nexport default Title;","import React, {useDebugValue, useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = (props) => {\r\n\r\n    const [resultNamesString, setResultNamesString] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        console.log(\"Props from Results History Item\");\r\n        console.log(props);\r\n        let resultNames = \"\";\r\n        if (props.result.length > 0) {\r\n            resultNames += props.result[0];\r\n            for (let i = 1; i < props.result.length; i++){\r\n                resultNames += \" + \" + props.result[i];\r\n            }\r\n        }\r\n        setResultNamesString(resultNames);\r\n    }, [props]);\r\n\r\n\r\n    let options = {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    };\r\n    let date = new Date(props.date);\r\n    let longDate = date.toLocaleTimeString('ru-RU', options);\r\n\r\n    return (\r\n        <div onClick={props.onClick}>\r\n            <div className={props.className}>\r\n                <span className={\"date\"}>\r\n                    {longDate}\r\n                </span>\r\n                <br/>\r\n                <span className={\"result_name\"}>\r\n                    {resultNamesString}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ResultHistoryItem = styled(Item)`\r\n    \r\n    border:1px ${props => props.primary ? '#2E753E' : '#FD759C'} solid;\r\n    padding: 20px 40px;\r\n    font-size: 17px;\r\n    border-radius: 15px;\r\n    display: inline-block;\r\n    margin: 10px auto;\r\n    .date{\r\n        color: '#4d4d4d';\r\n        font-style: italic;\r\n    }\r\n    .result_name{\r\n        font-weight:bold;\r\n    }\r\n    :hover{\r\n        background-color: ${props => props.primary ? '#2E753E' : '#FD759C'};\r\n        color: white;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst render = () => (\r\n    <ResultHistoryItem/>\r\n)\r\n\r\nexport default ResultHistoryItem","import styled from \"styled-components\";\r\n\r\nconst Paragraph = styled.p`\r\n    border: 1px ${props => props.secondary? '#FD759C': '#2E753E'} solid;\r\n    background-color: ${props => props.primary?'#2E753E':props.secondary&&props.bold?'#FD759C':'white'};\r\n    color: ${props => props.primary || (props.secondary&&props.bold)?'white':'#4d4d4d'};\r\n    font-size: 18px;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n    text-align: ${props => props.align === 'left'?'left':props.align === 'right'?'right':'center'};\r\n`;\r\n\r\nexport default Paragraph;","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nconst LoaderImg = (props) => {\r\n    return (\r\n        <div>\r\n            <img alt={\"Loading...\"}\r\n                 className={props.className} {...props}\r\n                 src=\"/images/preloader.svg\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Preloader = styled(LoaderImg)`\r\n    width: 150px;\r\n    display: inline-block;\r\n    \r\n`;\r\n\r\nexport default Preloader;","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport ResultHistoryItem from \"../StyledComponents/ResultsHistoryItem\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\n\r\nconst ResultsHistory = (props) => {\r\n    const [isHistoryFetching, setHistoryFetching] = useState(false);\r\n    const [resultsHistory, setResultsHistory] = useState([]);\r\n    const [resultHistoryItems, setResultHistoryItems] = useState([]);\r\n    const [isInitialized, setInitialized] = useState(false);\r\n\r\n    const updateHistory = useCallback(() => {\r\n        if (!isInitialized) {\r\n            setHistoryFetching(true);\r\n            console.log('fetching /api/sessions/' + props.user_id);\r\n            return fetch('/api/sessions/' + props.user_id)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    if (result) {\r\n                        props.updateResultsHistory(result);\r\n                    }\r\n                    console.log(result);\r\n                    setHistoryFetching(false);\r\n                    //setResultsHistory([...result]);\r\n                    return result;\r\n\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    }, [isInitialized, props.user_id]);\r\n\r\n    useEffect(() => {\r\n        setResultsHistory(props.resultsHistory);\r\n    }, [props.resultsHistory]);\r\n\r\n\r\n    useEffect(() => {\r\n        updateHistory()\r\n    }, [isInitialized, updateHistory]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Getting history items\");\r\n        console.log(resultsHistory);\r\n        if (resultsHistory.length > 0) {\r\n            setResultHistoryItems(resultsHistory.map(item => <ResultHistoryItem {...item}\r\n                                                                                key={item.session_id}\r\n                                                                                onClick={() => {\r\n                                                                                    props.history.push('/result/' + item.session_id);\r\n                                                                                }}\r\n            />));\r\n            setInitialized(true);\r\n        } else {\r\n            setResultHistoryItems(\r\n                <Paragraph>\r\n                    Ваша история пуста. Вы еще ни разу не проходили тест.\r\n                </Paragraph>);\r\n        }\r\n    }, [resultsHistory, props.resultsHistory, props.history]);\r\n\r\n    return (\r\n        <div>\r\n            {isHistoryFetching ? <Preloader/> : resultHistoryItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsHistory;","import styled from \"styled-components\";\r\nimport ResultsHistory from \"../Components/ResultsHistory\";\r\n\r\n\r\nconst ResultHistory = styled(ResultsHistory)`\r\n`;\r\n\r\nexport default ResultHistory;","export const UPDATE_RESULTS_HISTORY = 'UPDATE-RESULTS-HISTORY';\r\n\r\nconst initialState = [\r\n];\r\n\r\nconst resultsHistoryReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_RESULTS_HISTORY:\r\n            return action.newState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default resultsHistoryReducer;","import {connect} from \"react-redux\";\r\nimport ResultsHistory from \"../StyledComponents/ResultsHistory\";\r\nimport {updateResultsHistoryActionCreator} from \"../redux/action-creators/results-history-action-creators\";\r\n\r\n\r\nlet mapStateToProps = (state, props) => {\r\n    return {\r\n        user_id:props.user_id,\r\n        resultsHistory:state.resultsHistory,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateResultsHistory: (newState) => {\r\n            dispatch(updateResultsHistoryActionCreator(newState));\r\n        }\r\n    };\r\n};\r\n\r\nconst ResultsHistoryContainer = connect(mapStateToProps, mapDispatchToProps)(ResultsHistory);\r\n\r\n\r\n\r\nexport default ResultsHistoryContainer;","import {UPDATE_RESULTS_HISTORY} from \"../reducers/results-history-reducer\";\r\n\r\nexport const updateResultsHistoryActionCreator = (newState) => {\r\n    return {\r\n        type: UPDATE_RESULTS_HISTORY,\r\n        newState\r\n    }\r\n};","import React from \"react\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Title from \"../StyledComponents/Title\";\r\nimport ResultsHistoryContainer from \"../ContainerComponents/ResultsHistoryContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n\r\n\r\n    const startSession = () => {\r\n        return fetch('/api/session/start/' + props.user_id)\r\n            .then(response => {\r\n                console.log(response);\r\n                return response.json()\r\n            })\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const runTestHandler = () => {\r\n        startSession();\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button primary as={NavLink} to={'/test/'} onClick={runTestHandler}>\r\n                Пройти тест\r\n            </Button>\r\n            <Title secondary>\r\n                История\r\n            </Title>\r\n            <ResultsHistoryContainer user_id={props.user_id}\r\n                                     history={props.history}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","export const UPDATE_USER_INFO = 'UPDATE-USER-INFO';\r\n\r\nconst initialState = {\r\n    user_id: '1'\r\n}\r\n\r\nconst userInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_USER_INFO:\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userInfoReducer;","import {UPDATE_USER_INFO} from \"../reducers/user-info-reducer\";\r\n\r\n\r\nconst updateUserInfoActionCreator = (userInfo) => {\r\n    return {\r\n        type: UPDATE_USER_INFO,\r\n        userInfo: {\r\n            user_id: userInfo.user_id\r\n        }\r\n    };\r\n};\r\n\r\nexport default updateUserInfoActionCreator;","import {connect} from \"react-redux\";\r\nimport Home from \"../Components/Home\";\r\nimport updateUserInfoActionCreator from \"../redux/action-creators/user-info-action-creators\";\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        history: props.history,\r\n        user_id: props.user_id\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateUserInfo: (userInfo) => {\r\n            dispatch(updateUserInfoActionCreator(userInfo));\r\n        }\r\n    }\r\n};\r\n\r\nconst HomeContainer = connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <Paragraph primary>\r\n            {props.question_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from \"styled-components\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Paragraph from \"./Paragraph\";\r\n\r\nlet AnswerItem = (props) => {\r\n    let [chosen, setChosen] = useState(false);\r\n    useEffect(()=> {\r\n        setChosen(props.chosen);\r\n    }, [props.chosen]);\r\n    return (\r\n        <Paragraph secondary bold={chosen} className={props.className} onClick = {props.onClick} >\r\n            {props.answer_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nAnswerItem = styled(AnswerItem)`\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    \r\n`;\r\n\r\nexport default AnswerItem;","import React, {useEffect, useState, useCallback} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AnswerItem from \"./AnswerItem\";\r\nimport Preloader from \"./Preloader\";\r\n\r\nlet Answers = (props) => {\r\n    let [answers, setAnswers] = useState([]);\r\n    let [isFetching, setFetching] = useState(true);\r\n    let [answerItems, setAnswerItems] = useState(null);\r\n\r\n\r\n    const getAnswers = useCallback((question_id) => {\r\n        console.log(\"Fetching answers for question \" + question_id);\r\n        if (question_id) {\r\n            return fetch('/api/answers/' + question_id)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log(result);\r\n                    setAnswers(result);\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            return [];\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getAnswers(props.question_id)\r\n\r\n    }, [props.question_id, getAnswers]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (answers) {\r\n            setAnswerItems(answers.map(answer => {\r\n                return <AnswerItem answer_id={answer.answer_id} answer_text={answer.answer_text}\r\n                                   onClick={(event) => {\r\n                                       props.answerChoiceHandler(answer.answer_id);\r\n                                       console.log(answer.answer_id);\r\n                                   }}\r\n                                   chosen={answer.answer_id === +props.chosenAnswerId}\r\n                />\r\n            }))\r\n        } else {\r\n            setAnswerItems(null);\r\n        }\r\n    }, [answers, props.chosenAnswerId, props.answerChoiceHandler]);\r\n\r\n    return (\r\n        <div>\r\n            {isFetching||props.isChosenFetching ? <Preloader/> : answerItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nAnswers = styled(Answers)`\r\n\r\n`;\r\n\r\nexport default Answers;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nlet Pages = (props) => {\r\n    return <div className={props.className}>\r\n        {props.currentPage}/{props.totalPages}\r\n    </div>\r\n};\r\n\r\nPages = styled(Pages)`\r\n    padding: 15px;\r\n    color: '#5e5e5e';\r\n    font-style:italic;\r\n    text-align: left;\r\n`;\r\n\r\nexport default Pages;","import React, {useEffect, useState, useCallback} from \"react\";\r\nimport Question from \"./Question\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\nimport Answers from \"../StyledComponents/Answers\";\r\nimport Pages from \"../StyledComponents/Pages\";\r\n\r\nconst Test = (props) => {\r\n\r\n\r\n        let [questions, setQuestions] = useState([]);\r\n        let [isFetching, setFetching] = useState(false);\r\n        let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n        let [chosenAnswerId, setChosenAnswerId] = useState(null);\r\n        let [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\r\n        let [isChosenAnswerFetching, setChosenAnswerFetching] = useState(false);\r\n\r\n        const isTheLastQuestion = () => {\r\n            return currentQuestionIndex === questions.length - 1;\r\n        };\r\n\r\n\r\n        const getChosenAnswer = (question_id) => {\r\n            setChosenAnswerFetching(true);\r\n            console.log(\"Trying to fetch chosen answers. Session id :\" + props.sessionId +\r\n                ', chosen answer id: ' + chosenAnswerId +\r\n                'question id: ' + question_id\r\n            );\r\n            if (+props.sessionId && !chosenAnswerId) {\r\n                console.log(\"Fetching chosen answer\");\r\n                return fetch('/api/history/answers/' + props.sessionId + '/' + question_id)\r\n                    .then(response => response.json())\r\n                    .then(result => {\r\n                        console.log(\"Got the chosen answer from history\");\r\n                        console.log(result);\r\n                        if (result.length > 0) {\r\n                            setChosenAnswerId(result[0].answer_id);\r\n                        }\r\n                        setChosenAnswerFetching(false);\r\n                        return result;\r\n                    })\r\n                    .catch(err => {\r\n                        console.log('Couldn\\'t get the chosen answer from the server');\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n        const getSessionId = () => {\r\n            setFetching(true);\r\n            console.log('/api/session/' + props.user_id);\r\n            return fetch('/api/session/' + props.user_id)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    if (result)\r\n                        props.updateSessionId(result.session_id);\r\n                    setFetching(false);\r\n                    return result.session_id;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const getQuestions = () => {\r\n            setFetching(true);\r\n            console.log('Getting questions');\r\n            return fetch('/api/questions')\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log('questions result');\r\n                    console.log(result);\r\n                    if (result) {\r\n                        props.updateQuestions(result);\r\n                        setQuestions(result);\r\n                    }\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const handleAnswerChoice = useCallback((answer_id) => {\r\n            setChosenAnswerId(answer_id);\r\n        }, []);\r\n\r\n        const putAnswer = (data) => {\r\n            console.log('client put body');\r\n            console.log(JSON.stringify(data));\r\n            fetch('/api/answer',\r\n                {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify(data),\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n\r\n        const nextQuestionHandler = () => {\r\n            if (questions){\r\n                if (chosenAnswerId) {\r\n                    putAnswer({\r\n                        session_id: props.session_id,\r\n                        answer_id: chosenAnswerId,\r\n                        question_id: questions[currentQuestionIndex].question_id\r\n                    });\r\n                }\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n                else{\r\n                    finishTestHandler();\r\n                }\r\n            }\r\n\r\n\r\n        };\r\n        const prevQuestionHandler = () => {\r\n            if (questions)\r\n                if (currentQuestionIndex > 0) {\r\n                    if (chosenAnswerId) {\r\n                        putAnswer({\r\n                            session_id: props.session_id,\r\n                            answer_id: chosenAnswerId,\r\n                            question_id: questions[currentQuestionIndex].question_id\r\n                        });\r\n                    }\r\n                    setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n        };\r\n\r\n        const finishTestHandler = () => {\r\n\r\n            props.showFinishConfirmation(true);\r\n        };\r\n\r\n        useEffect(() => {\r\n            props.setSessionId(props.session_id);\r\n        }, [props.session_id]);\r\n\r\n        useEffect(() => {\r\n            setPrevButtonDisabled(currentQuestionIndex === 0);\r\n        }, [currentQuestionIndex]);\r\n\r\n        useEffect(() => {\r\n            getSessionId();\r\n            getQuestions();\r\n        }, [props]);\r\n\r\n\r\n        useEffect(() => {\r\n            if (questions.length > 0 && currentQuestionIndex !== undefined) {\r\n                console.log('Getting chosen answer');\r\n                console.log(questions);\r\n                console.log(currentQuestionIndex);\r\n                getChosenAnswer(questions[currentQuestionIndex].question_id);\r\n            }\r\n\r\n        }, [props.sessionId, currentQuestionIndex, questions]);\r\n\r\n        let questionItems = questions.map(question => <Question primary session_id={props.session_id}\r\n                                                                question_id={question.question_id}\r\n                                                                question_text={question.question_text}\r\n                                                                questions_picture={question.question_picture}/>);\r\n\r\n        return (\r\n            <div>\r\n                {/*<Switch>\r\n                <Route path={'/:question_id'} render={(p) => <Question session_id = {props.session_id} question_id={p.match.params.question_id} lastQuestionHandler={setIsLastQuestion} />}/>\r\n            </Switch>*/}\r\n\r\n                {isFetching ? <Preloader/> :\r\n                    <div>\r\n                        <Pages currentPage={currentQuestionIndex + 1} totalPages={questions.length}/>\r\n                        {questionItems[currentQuestionIndex]}\r\n                    </div>}\r\n                <Answers question_id={questions.length > 0 ? questions[currentQuestionIndex].question_id : \"\"}\r\n                         answerChoiceHandler={handleAnswerChoice}\r\n                         chosenAnswerId={chosenAnswerId} isChosenFetching={isChosenAnswerFetching}  />\r\n                {isFetching ? null :\r\n                    <div>\r\n                        <Button onClick={prevQuestionHandler} disabled={isPrevButtonDisabled}>\r\n                            Назад\r\n                        </Button>\r\n                        <Button primary={isTheLastQuestion()}\r\n                                onClick={nextQuestionHandler}>\r\n                            {currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Вперед'}\r\n                        </Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Test;","export const UPDATE_SESSION_ID = 'UPDATE-SESSION-ID';\r\n\r\nconst initialState = {\r\n    session_id:null\r\n};\r\n\r\nconst sessionInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_SESSION_ID:\r\n            return {\r\n                session_id: action.session_id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sessionInfoReducer;","import {UPDATE_SESSION_ID} from \"../reducers/session-info-reducer\";\r\n\r\nconst updateSessionIdActionCreator = (session_id) => {\r\n    return {\r\n        type: UPDATE_SESSION_ID,\r\n        session_id\r\n    }\r\n};\r\n\r\nexport default updateSessionIdActionCreator;","export const UPDATE_QUESTIONS = 'UPDATE-QUESTIONS';\r\n\r\nconst questionsReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case UPDATE_QUESTIONS:\r\n            return action.questions;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default questionsReducer;","import {UPDATE_QUESTIONS} from \"../reducers/questions-reducer\";\r\n\r\nconst updateQuestionsActionCreator = (questions) => {\r\n    return{\r\n        type: UPDATE_QUESTIONS,\r\n        questions\r\n    }\r\n};\r\n\r\nexport default updateQuestionsActionCreator;","import {connect} from \"react-redux\";\r\nimport Test from \"../Components/Test\";\r\nimport updateSessionIdActionCreator from \"../redux/action-creators/session-info-action-creators\";\r\nimport updateQuestionsActionCreator from \"../redux/action-creators/questions-action-creators\";\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        session_id: state.sessionInfo.session_id,\r\n        user_id: props.user_id\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateSessionId: (session_id) => {\r\n            dispatch(updateSessionIdActionCreator(session_id));\r\n        },\r\n        updateQuestions: (questions) => {\r\n            dispatch(updateQuestionsActionCreator(questions));\r\n        },\r\n    };\r\n};\r\n\r\nconst TestContainer = connect(mapStateToProps, mapDispatchToProps)(Test);\r\n\r\nexport default TestContainer;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nlet FinishConfirmWindow = props => {\r\n\r\n    const history = useHistory();\r\n\r\n    const yesHandler = () => {\r\n        props.showFinishConfirmation(false);\r\n        fetch('/api/result/calculate/' + props.userId + \"/\"  + props.sessionId)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log(result);\r\n                history.push('/result/' + props.sessionId)\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const noHandler = () => {\r\n        props.showFinishConfirmation(false);\r\n    };\r\n\r\n    const getAnswers = () => {\r\n        return fetch('/api/history/answers/' + props.sessionId)\r\n            .then(response => response.json())\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Couldn't get answers from the server\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className={\"wrapper\"}>\r\n                <p> Вы уверены, что хотите завершить тестирование?</p>\r\n                <Button secondary className={\"no\"} onClick={noHandler}>\r\n                    Нет\r\n                </Button>\r\n                <Button  primary className={\"yes\"} onClick={yesHandler}>\r\n                    Да\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nFinishConfirmWindow = styled(FinishConfirmWindow)`\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    background-color: rgba(33, 33, 33, 0.81);    \r\n    .wrapper{\r\n        background-color: white;\r\n        border: 1px black solid;\r\n        width: 800px;\r\n        margin: 200px auto;\r\n        padding: 20px;\r\n        text-align: center;\r\n        \r\n        .yes{\r\n            border: none;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default FinishConfirmWindow;","import styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\n\r\nconst BackToHomeButton = styled(Button)`\r\n    width: 100%;\r\n`;\r\n\r\nexport default BackToHomeButton;","import styled from \"styled-components\";\r\n\r\nconst TemperImage = styled.img`\r\n    width: 600px;\r\n`;\r\n\r\nexport default TemperImage;","class Attachment{\r\n\r\n    constructor(text){\r\n        this.media = [\r\n            {\r\n                type: \"text\",\r\n                text: text\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nexport default Attachment;","import {publicKey} from \"../credentials\";\r\nimport Attachment from \"./Attachment\";\r\nvar md5 = require('md5');\r\n\r\n\r\nclass PostTopicRequest {\r\n    constructor(topicData, sessionKey, sessionSecretKey, sig) {\r\n        this.method = \"mediatopic.post\";\r\n        this.attachment = JSON.stringify(new Attachment(topicData.text));\r\n        this.application_key = publicKey;\r\n        this.format = \"json\";\r\n        // let keys = Object.keys(this);\r\n        // keys.sort((key1, key2) => key1 > key2 ? 1 : -1);\r\n        // let sigString = \"\";\r\n        // for (let key of keys){\r\n        //     sigString += key + \"=\" + this[key];\r\n        // }\r\n        // sigString += sessionSecretKey;\r\n        //let sig = md5(sigString);\r\n        //this.sig = sig.toLowerCase();\r\n        this.sig = sig;\r\n        this.session_key = sessionKey;\r\n\r\n    }\r\n}\r\n\r\nexport default PostTopicRequest;","export const accessToken = 'tkn1wUxQnOcHl3P1KUBVX9SMqo2BdVD6mkongFvu27KiKjAVwlzraGOMRECC2qkQx3SM1';\r\nexport const secretSessionKey = '9ccf39e7075aedcb7149643a75ccdd99';\r\nexport const applicationID = '512000565248';\r\nexport const publicKey = \"CBABKNJGDIHBABABA\";\r\nexport const applicationSecretKey = \"F17D1A77BC6DD96D61AD5DB9\";","import React, {useEffect, useState} from 'react';\r\nimport {getPostMediatopicURL} from \"../Functions/okapi\";\r\nimport Paragraph from \"./Paragraph\";\r\nimport Button from \"./Button\";\r\n\r\nconst ShareView = (props) => {\r\n\r\n    const [shareURL, setShareURL] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let url = getPostMediatopicURL({text: props.mediatopicText}, props.sessionKey, props.sessionSecretKey,\r\n            props.sig, props.webServer);\r\n        setShareURL(url);\r\n    }, [props.mediatopicText, props.sessionSecretKey, props.sessionKey]);\r\n\r\n    return (\r\n        <div>\r\n            <Paragraph secondary style={{textAlign: \"center\"}}>\r\n                <div>\r\n                    {props.mediatopicText}\r\n                </div>\r\n                <Button secondary bold onClick={() => {\r\n                    fetch(shareURL)\r\n                        .then(() => {\r\n                            alert(\"Запись успешно опубликована\");\r\n                        })\r\n                        .catch(err => {\r\n                            alert(\"Ошибка при публикации\");\r\n                            console.log(err);\r\n                        });\r\n                }}>\r\n                    Опубликовать\r\n                </Button>\r\n\r\n                {/*<iframe src = {shareURL}*/}\r\n                {/*        width={\"500px\"}*/}\r\n                {/*        height={\"400px\"}*/}\r\n                {/*        style={{*/}\r\n                {/*            border: \"1px blue dashed\",*/}\r\n                {/*            marginTop: \"20px\"*/}\r\n                {/*        }}>*/}\r\n                {/*    Can't show share iframe*/}\r\n                {/*</iframe>*/}\r\n            </Paragraph>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShareView;","import PostTopicRequest from \"../Classes/PostTopicRequest\";\r\n\r\nexport const getPostMediatopicURL = (topicData, sessionKey, sessionSecretKey, sig, webServer) => {\r\n    let request = new PostTopicRequest(topicData, sessionKey, sessionSecretKey, sig);\r\n    let requestURL = \"https://api.ok.ru\";\r\n    requestURL += \"/fb.do?\";\r\n    let params = new URLSearchParams();\r\n    for (let [key, value] of Object.entries(request)){\r\n        params.append(key, value);\r\n    }\r\n    requestURL = requestURL + params;\r\n    // return fetch(requestURL,{\r\n    //     headers: {\r\n    //         \"Access-Control-Allow-Origin\": \"https://api.ok.ru/\"\r\n    //     }\r\n    // })\r\n    //     .then(response => {\r\n    //         console.log(response.status + \" \" + response.statusText);\r\n    //     });\r\n    console.log(requestURL);\r\n    return requestURL;\r\n};","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Preloader from \"./Preloader\";\r\nimport Paragraph from \"./Paragraph\";\r\nimport BackToHomeButton from \"./BackToHomeButton\";\r\nimport TemperImage from \"./TemperImage\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Button from \"./Button\";\r\nimport {getPostMediatopicURL} from \"../Functions/okapi\";\r\nimport ShareView from \"./ShareView\";\r\n\r\nlet Result = (props) => {\r\n\r\n        const [isFetching, setFetching] = useState(true);\r\n        const [resultData, setResultData] = useState([]);\r\n        const [resultDataItems, setResultDataItems] = useState([]);\r\n        const [mediatopicText, setMediatopicText] = useState(\"\");\r\n        const history = useHistory();\r\n        const [showShareIframe, setShowShareIframe] = useState(false);\r\n\r\n\r\n        const getResultNamesString = (result) => {\r\n            let resultNames = \"\";\r\n            console.log(result);\r\n            if (result.length > 0) {\r\n                resultNames += result[0].name;\r\n                for (let i = 1; i < result.length; i++) {\r\n                    resultNames += \" + \" + result[i].name;\r\n                }\r\n            }\r\n            return resultNames;\r\n        };\r\n\r\n\r\n        const shareResultHandler = () => {\r\n            setShowShareIframe(state => !state);\r\n        };\r\n\r\n        useEffect(() => {\r\n            setFetching(true);\r\n            console.log(props.sessionId);\r\n            fetch('/api/result/' + props.sessionId)\r\n                .then(response => {\r\n                    let result = response.json();\r\n                    console.log(result);\r\n                    return result;\r\n                })\r\n                .then(result => {\r\n                    console.log(\"Got Result Data\");\r\n                    console.log(result);\r\n                    setResultData(result);\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .then(result => {\r\n                    if (result) {\r\n                        setResultDataItems(result.map(result => {\r\n                            setMediatopicText(text => text.length === 0 ? \"Я - \" + result.name :\r\n                                text + \" - \" + result.name);\r\n                            return (\r\n                                <>\r\n                                    <div>\r\n                                        <b>{result.name}</b>\r\n                                    </div>\r\n                                    <TemperImage src={result.picture}/>\r\n                                    <Paragraph align={'left'}>\r\n                                        {result.text}\r\n                                    </Paragraph>\r\n                                </>\r\n                            );\r\n                        }));\r\n                        return result;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Couldn't fetch the result data\");\r\n                    console.log(err);\r\n                })\r\n        }, [props]);\r\n\r\n        useEffect(() => {\r\n            if (resultData) {\r\n                setFetching(false);\r\n            }\r\n        }, [resultData]);\r\n\r\n\r\n        return (\r\n            <div>\r\n                <BackToHomeButton primary onClick={() =>\r\n                    history.push(\"/\")\r\n                }>\r\n                    Вернуться на главную\r\n                </BackToHomeButton>\r\n                {isFetching || resultDataItems.length === 0 ? <Preloader/> :\r\n                    <div>\r\n                        <Paragraph>`\r\n                            Вы - {getResultNamesString(resultData)}\r\n                            <br/>\r\n                            {resultDataItems}\r\n                            {/*<a target={\"_self\"} href={shareURL}>*/}\r\n                            <div>\r\n                                <Button secondary bold onClick={shareResultHandler}>\r\n                                    Поделиться\r\n                                </Button>\r\n                            </div>\r\n\r\n                            <div>\r\n                                {\r\n                                    showShareIframe ?\r\n                                        <ShareView mediatopicText={mediatopicText}\r\n                                                   sessionKey={props.sessionKey}\r\n                                                   sessionSecretKey={props.sessionSecretKey}/>\r\n                                    : null\r\n                                }\r\n                            </div>\r\n\r\n                            {/*</a>*/}\r\n\r\n\r\n                        </Paragraph>\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nResult = styled(Result)`\r\n\r\n`;\r\n\r\nexport default Result;","import {combineReducers, createStore} from \"redux\";\r\nimport resultsHistoryReducer from \"./reducers/results-history-reducer\";\r\nimport userInfoReducer from \"./reducers/user-info-reducer\";\r\nimport sessionInfoReducer from \"./reducers/session-info-reducer\";\r\nimport questionsReducer from \"./reducers/questions-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    resultsHistory: resultsHistoryReducer,\r\n    userInfo: userInfoReducer,\r\n    sessionInfo: sessionInfoReducer,\r\n    questions: questionsReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Paragraph from \"./Paragraph\";\r\n\r\nlet About = (props) => {\r\n    return (\r\n        <div {...props}>\r\n            <Paragraph className={'info'}>\r\n                Известно, что все люди по разному реагируют на события и испытывают разные эмоции при одних и тех же\r\n                событиях.\r\n                <br/>В наших генах записано множество информации. В том числе, там записаны особенности работы нервной системы.\r\n                <br/>В зависимости от свойств нервной системы, присущих человеку, можно говорить о том, каким темпераментом\r\n                он обладает.\r\n                <br/>\r\n                <br/>Данный тест поможет вам определить свой личный темперамент.\r\n                <br/>\r\n                <br/><i>Приложение создано в качестве индивидуального домашнего задания по курсу Системы Управления Контентом.\r\n                <br/>Матмех, СПбГУ, 2020 год.</i>\r\n                <br/>\r\n                <br/>По всем вопросам можете писать на <b>почту</b> katherine.inspiration@gmail.com\r\n            </Paragraph>\r\n        </div>\r\n    );\r\n};\r\n\r\nAbout = styled(About)`\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(33, 33, 33, 0.81);\r\n    position: fixed;\r\n    .info{\r\n        padding: 30px;\r\n        margin: 110px auto;\r\n        width: 800px;\r\n    }\r\n    \r\n`;\r\n\r\nexport default About;","import React, {useEffect} from 'react';\r\nimport {applicationID} from \"../credentials\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst oauthURL = \"https://connect.ok.ru/oauth/authorize?client_id=\" + applicationID +\r\n    \"&scope=VALUABLE_ACCESS;LONG_ACCESS_TOKEN;PUBLISH_TO_STREAM&\" +\r\n    \"response_type=token&redirect_uri=https://tempermeter-server.herokuapp.com\";\r\n\r\nconst Auth = (props) => {\r\n\r\n    // useEffect(() => {\r\n    //     let oauthURL = \"https://connect.ok.ru/oauth/authorize?client_id=\" + applicationID +\r\n    //         \"&scope=VALUABLE_ACCESS;LONG_ACCESS_TOKEN;PUBLISH_TO_STREAM&\" +\r\n    //         \"response_type=token&redirect_uri=https://tempermeter-server.herokuapp.com\";\r\n    //     props.history.push(oauthURL);\r\n    // }, [props.history]);\r\n\r\n    return <Redirect to={oauthURL}/>\r\n};\r\n\r\nexport default Auth;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Header from \"./StyledComponents/Header\";\r\nimport HeaderLogo from \"./StyledComponents/HeaderLogo\";\r\nimport FAIcon from \"./StyledComponents/FAIcon\";\r\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Main from \"./StyledComponents/Main\";\r\nimport {Route, Switch, useHistory} from \"react-router-dom\";\r\nimport HomeContainer from \"./ContainerComponents/HomeContainer\";\r\nimport TestContainer from \"./ContainerComponents/TestContainer\";\r\nimport FinishConfirmWindow from \"./StyledComponents/FinishComfirmWindow\";\r\nimport Result from \"./StyledComponents/Result\";\r\nimport store from \"./redux/store\";\r\nimport About from \"./StyledComponents/About\";\r\nimport Auth from \"./Components/Auth\";\r\nimport Preloader from \"./StyledComponents/Preloader\";\r\n\r\nfunction App(props) {\r\n\r\n    const [isFinishConfirmationShown, setFinishConfirmationShown] = useState(false);\r\n    const [sessionId, setSessionId] = useState(null);\r\n    const [isAboutShowed, showAbout] = useState(false);\r\n    const [authInfo, setAuthInfo] = useState(\"\");\r\n    const [userInfo, setUserInfo] = useState(null);\r\n\r\n\r\n    const [sessionInfo, setSessionInfo] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n\r\n        let hashParams = window.location.hash.substring(1);\r\n        hashParams = hashParams.split(\"&\").reduce((params, current) => {\r\n            let currentParam = current.split(\"=\");\r\n            return {\r\n                ...params,\r\n                [currentParam[0]]: currentParam[1]\r\n            };\r\n        }, {});\r\n        console.log(hashParams);\r\n        setAuthInfo(hashParams);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Search params\");\r\n        let sessionInfo = history.location.search;\r\n        console.log(sessionInfo);\r\n        sessionInfo = sessionInfo.substring(1, sessionInfo.length);\r\n        sessionInfo = sessionInfo.split(\"&\").reduce((accum, current) => {\r\n            let pair = current.split(\"=\");\r\n            return {\r\n                ...accum,\r\n                [pair[0]]: pair[1]\r\n            };\r\n        }, {});\r\n        setSessionInfo(sessionInfo);\r\n        console.log(\"Parsed session info\");\r\n        console.log(sessionInfo);\r\n\r\n    }, [props]);\r\n\r\n\r\n    return (\r\n        <div style={{height: \"500px\", overflowY: \"scroll\"}} onClick={() => {\r\n            if (isAboutShowed) {\r\n                showAbout(false);\r\n            }\r\n        }}>\r\n\r\n            {isFinishConfirmationShown ? <FinishConfirmWindow showFinishConfirmation={setFinishConfirmationShown}\r\n                                                              sessionId={sessionId}\r\n                                                              userId={sessionInfo.logged_user_id}\r\n\r\n            /> : null}\r\n            {isAboutShowed ? <About/> : null}\r\n            <Header>\r\n                <HeaderLogo src=\"images/Tempermeter-logo.svg\" alt={\"Tempermeter logo\"}/>\r\n                <FAIcon icon={faInfoCircle} onClick={() => {\r\n                    showAbout(true);\r\n                }}/>\r\n\r\n            </Header>\r\n            <Main>\r\n                {sessionInfo ?\r\n                    <Switch>\r\n                        <Route exact path={\"/\"}\r\n                               render={() => <HomeContainer user_id={sessionInfo.logged_user_id} history={history}/>}/>\r\n                        <Route path={\"/auth\"} render={() => <Auth history={history}/>}/>\r\n                        <Route exact path={\"/test/\"} render={() => <TestContainer\r\n                            history={history}\r\n                            showFinishConfirmation={setFinishConfirmationShown}\r\n                            setSessionId={setSessionId}\r\n                            sessionId={sessionId}\r\n                            user_id={sessionInfo.logged_user_id}\r\n                        />}/>\r\n                        <Route exact path={'/result/:session_id'}\r\n                               render={(p) => <Result sessionId={p.match.params.session_id}\r\n                                                      sessionKey={sessionInfo.session_key}\r\n                                                      sessionSecretKey={sessionInfo.session_secret_key}\r\n                                                      history={history}\r\n                                                      sig={sessionInfo.sig}\r\n                                                      user_id={sessionInfo.logged_user_id}\r\n                                                      webServer={sessionInfo.web_server}/>}/>\r\n                        <Route render={() => <div>The page isn't found</div>}/>\r\n                    </Switch>\r\n                    : <Preloader/>\r\n                }\r\n            </Main>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store = {store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}