{"version":3,"sources":["StyledComponents/Header.jsx","StyledComponents/HeaderLogo.jsx","StyledComponents/FAIcon.jsx","StyledComponents/Main.jsx","StyledComponents/Button.jsx","StyledComponents/Title.jsx","StyledComponents/ResultsHistoryItem.jsx","StyledComponents/Paragraph.jsx","StyledComponents/Preloader.jsx","Components/ResultsHistory.jsx","StyledComponents/ResultsHistory.jsx","redux/reducers/results-history-reducer.js","ContainerComponents/ResultsHistoryContainer.jsx","redux/action-creators/results-history-action-creators.js","Components/Home.jsx","redux/reducers/user-info-reducer.js","redux/action-creators/user-info-action-creators.js","ContainerComponents/HomeContainer.jsx","Components/Question.jsx","StyledComponents/AnswerItem.jsx","StyledComponents/Answers.jsx","StyledComponents/Pages.jsx","Components/Test.jsx","redux/reducers/session-info-reducer.js","redux/action-creators/session-info-action-creators.js","redux/reducers/questions-reducer.js","redux/action-creators/questions-action-creators.js","ContainerComponents/TestContainer.jsx","StyledComponents/FullScreenLogo.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Header","styled","header","HeaderLogo","img","FAIcon","FontAwesomeIcon","props","secondary","Main","section","Button","button","disabled","primary","Title","h1","ResultHistoryItem","console","log","longDate","Date","date","toLocaleTimeString","month","day","year","hour","minute","second","className","result_name","Paragraph","p","bold","Preloader","src","ResultsHistory","useState","isInitialized","setInitialized","isHistoryFetching","setHistoryFetching","resultsHistory","setResultsHistory","user_id","fetch","then","response","json","result","updateResultsHistory","catch","err","items","length","map","item","key","session_id","ResultHistory","initialState","resultsHistoryReducer","state","action","type","newState","ResultsHistoryContainer","connect","userInfo","dispatch","updateResultsHistoryActionCreator","Home","as","NavLink","to","onClick","userInfoReducer","updateUserInfoActionCreator","HomeContainer","updateUserInfo","Question","question_text","AnswerItem","chosen","setChosen","useEffect","answer_text","Answers","answers","setAnswers","isFetching","setFetching","answerItems","setAnswerItems","getAnswers","question_id","answer","answer_id","event","answerChoiceHandler","chosenAnswerId","isChosenFetching","Pages","currentPage","totalPages","Test","sessionId","setSessionId","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","setChosenAnswerId","isPrevButtonDisabled","setPrevButtonDisabled","isChosenAnswerFetching","setChosenAnswerFetching","putAnswer","data","JSON","stringify","method","body","headers","updateSessionId","updateQuestions","undefined","getChosenAnswer","questionItems","question","questions_picture","question_picture","sessionInfoReducer","updateSessionIdActionCreator","questionsReducer","updateQuestionsActionCreator","TestContainer","sessionInfo","App","alt","icon","faInfoCircle","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ccd107fa.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n    background-color: white;\r\n    padding: 0px;\r\n    width: 100%;\r\n    display:block;\r\n    height: 100px;\r\n    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nconst HeaderLogo = styled.img`\r\n    width: 150px;\r\n    height: 150px;\r\n    position:absolute;\r\n    top: -30px;\r\n    left: 20px;\r\n`;\r\n\r\nexport default HeaderLogo;","import styled from \"styled-components\";\r\nimport { FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst FAIcon = styled(FontAwesomeIcon)`\r\n    font-size: 30px;\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    position: absolute;\r\n    top: 30px;\r\n    right: 40px;\r\n    \r\n    :hover{\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport default FAIcon;","import styled from \"styled-components\";\r\n\r\nconst Main = styled.section`\r\n    width: 1000px;\r\n    margin: 20px auto;\r\n    background-color: white;\r\n    padding: 20px;\r\n    display: block;\r\n    text-align: center;\r\n    border: 1px pink solid;\r\n`;\r\n\r\nexport default Main;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n    padding: 18px 60px;\r\n    background-color: ${props => props.disabled ? '#a3a3a3' : props.primary ? '#2E753E' : props.secondary ? '#FD759C' : 'white'};\r\n    color: ${props => props.disabled ? 'black' : props.primary || props.secondary ? 'white' : '#2E753E'};\r\n    border: 1px ${props => props.disabled ? 'black' : props.secondary ? '#FD759C' : '#2E753E'} solid;\r\n    display: inline-block;\r\n    font-size:20px;\r\n    text-decoration: none;\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    :active{\r\n        box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\r\n    }\r\n`;\r\n\r\nexport default Button;","import styled from \"styled-components\";\r\n\r\nconst Title = styled.h1`\r\n    color: ${props => props.secondary? '#FD759C': '#2E753E'};\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n\r\n`;\r\n\r\nexport default Title;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Item = (props) => {\r\n    console.log(props);\r\n    let options = {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    };\r\n    let date = new Date(props.date);\r\n    let longDate = date.toLocaleTimeString('ru-RU', options);\r\n\r\n    return(\r\n        <div>\r\n            <div className={props.className}>\r\n                <span className={\"date\"}>\r\n                    {longDate}\r\n                </span>\r\n                <br/>\r\n                <span className={\"result_name\"}>\r\n                    {props.result_name}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ResultHistoryItem = styled(Item)`\r\n    \r\n    border:1px ${props => props.primary? '#2E753E': '#FD759C'} solid;\r\n    padding: 20px 40px;\r\n    font-size: 17px;\r\n    border-radius: 15px;\r\n    display: inline-block;\r\n    margin: 10px auto;\r\n    .date{\r\n        color: '#4d4d4d';\r\n        font-style: italic;\r\n    }\r\n    .result_name{\r\n        font-weight:bold;\r\n    }\r\n    :hover{\r\n        background-color: ${props => props.primary? '#2E753E': '#FD759C'};\r\n        color: white;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst render = () => (\r\n    <ResultHistoryItem />\r\n)\r\n\r\nexport default ResultHistoryItem","import styled from \"styled-components\";\r\n\r\nconst Paragraph = styled.p`\r\n    border: 1px ${props => props.secondary? '#FD759C': '#2E753E'} solid;\r\n    background-color: ${props => props.primary?'#2E753E':props.secondary&&props.bold?'#FD759C':'white'};\r\n    color: ${props => props.primary || props.secondary&&props.bold?'white':'#4d4d4d'};\r\n    font-size: 18px;\r\n    border-radius: 15px;\r\n    padding: 20px;\r\n    \r\n`;\r\n\r\nexport default Paragraph;","import styled from \"styled-components\";\r\nimport Header from \"./Header\";\r\nimport React from \"react\";\r\n\r\nconst LoaderImg = (props) => {\r\n    return (\r\n        <div>\r\n            <img className={props.className} {...props} src=\"/images/preloader.svg\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Preloader = styled(LoaderImg)`\r\n    width: 150px;\r\n    display: inline-block;\r\n    \r\n`;\r\n\r\nexport default Preloader;","import React, {useEffect, useState} from \"react\";\r\nimport ResultHistoryItem from \"../StyledComponents/ResultsHistoryItem\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\n\r\nconst ResultsHistory = (props) => {\r\n    let [isInitialized, setInitialized] = useState(false);\r\n    let [isHistoryFetching, setHistoryFetching] = useState(false);\r\n    let [resultsHistory, setResultsHistory] = useState([]);\r\n\r\n    const updateHistory = () => {\r\n        setHistoryFetching(true);\r\n        console.log('fetching /api/history/results/' + props.user_id);\r\n        return fetch('/api/history/results/' + props.user_id)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                console.log('result');\r\n                console.log(result);\r\n                if (result)\r\n                    props.updateResultsHistory(result);\r\n                setInitialized(true);\r\n                setHistoryFetching(false);\r\n                setResultsHistory(result);\r\n                return result;\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    if(!isInitialized) {\r\n        updateHistory();\r\n        setInitialized(true);\r\n    };\r\n\r\n\r\n    let items = props.resultsHistory.length>0?\r\n        resultsHistory.map( item => <ResultHistoryItem {...item} key={item.session_id} /> ) :\r\n        (<Paragraph>\r\n            Ваша история пуста. Вы еще ни разу не проходили тест.\r\n        </Paragraph>)\r\n    ;\r\n    return(\r\n      <div>\r\n          {isHistoryFetching?<Preloader/>:items}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default ResultsHistory;","import styled from \"styled-components\";\r\nimport ResultsHistory from \"../Components/ResultsHistory\";\r\n\r\n\r\nconst ResultHistory = styled(ResultsHistory)`\r\n`;\r\n\r\nexport default ResultHistory;","export const UPDATE_RESULTS_HISTORY = 'UPDATE-RESULTS-HISTORY';\r\n\r\nconst initialState = [\r\n];\r\n\r\nconst resultsHistoryReducer = (state = initialState, action) => {\r\n    let stateCopy = [...state];\r\n    switch(action.type){\r\n        case UPDATE_RESULTS_HISTORY:\r\n            return action.newState;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default resultsHistoryReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ResultsHistory from \"../StyledComponents/ResultsHistory\";\r\nimport {updateResultsHistoryActionCreator} from \"../redux/action-creators/results-history-action-creators\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        user_id:state.userInfo.user_id,\r\n        resultsHistory:state.resultsHistory,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateResultsHistory: (newState) => {\r\n            dispatch(updateResultsHistoryActionCreator(newState));\r\n        }\r\n    };\r\n};\r\n\r\nconst ResultsHistoryContainer = connect(mapStateToProps, mapDispatchToProps)(ResultsHistory);\r\n\r\n\r\n\r\nexport default ResultsHistoryContainer;","import {UPDATE_RESULTS_HISTORY} from \"../reducers/results-history-reducer\";\r\n\r\nexport const updateResultsHistoryActionCreator = (newState) => {\r\n    return {\r\n        type: UPDATE_RESULTS_HISTORY,\r\n        newState\r\n    }\r\n};","import React, {useState} from \"react\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Title from \"../StyledComponents/Title\";\r\nimport ResultsHistoryContainer from \"../ContainerComponents/ResultsHistoryContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n    const startSession = () => {\r\n        return fetch('/api/session/start/' + props.user_id)\r\n            .then(response => {\r\n                console.log(response);\r\n                return response.json()})\r\n            .then(result => console.log(result))\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    const runTestHandler = () => {\r\n        startSession();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary as={NavLink} to={'/test/1'} onClick={runTestHandler}>\r\n                Пройти тест\r\n            </Button>\r\n            <Title secondary>\r\n                История\r\n            </Title>\r\n            <ResultsHistoryContainer user_id={props.user_id} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","export const UPDATE_USER_INFO = 'UPDATE-USER-INFO';\r\n\r\nconst initialState = {\r\n    user_id: '1'\r\n}\r\n\r\nconst userInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_USER_INFO:\r\n            return action.userInfo;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default userInfoReducer;","import {UPDATE_USER_INFO} from \"../reducers/user-info-reducer\";\r\n\r\n\r\nconst updateUserInfoActionCreator = (userInfo) => {\r\n    return {\r\n        type: UPDATE_USER_INFO,\r\n        userInfo: {\r\n            user_id: userInfo.user_id\r\n        }\r\n    };\r\n};\r\n\r\nexport default updateUserInfoActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Home from \"../Components/Home\";\r\nimport updateUserInfoActionCreator from \"../redux/action-creators/user-info-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.userInfo\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateUserInfo: (userInfo) => {\r\n            dispatch(updateUserInfoActionCreator(userInfo));\r\n        }\r\n    }\r\n};\r\n\r\nconst HomeContainer = connect(mapStateToProps, mapDispatchToProps)(Home);\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport Paragraph from \"../StyledComponents/Paragraph\";\r\n\r\nconst Question = (props) => {\r\n    return (\r\n        <Paragraph primary>\r\n            {props.question_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nexport default Question;","import styled from \"styled-components\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Paragraph from \"./Paragraph\";\r\n\r\nlet AnswerItem = (props) => {\r\n    let [chosen, setChosen] = useState(false);\r\n    useEffect(()=> {\r\n        setChosen(props.chosen);\r\n        console.log(props);\r\n    }, [props.chosen]);\r\n    return (\r\n        <Paragraph secondary bold={chosen} className={props.className} onClick = {props.onClick} >\r\n            {props.answer_text}\r\n        </Paragraph>\r\n    );\r\n};\r\n\r\nAnswerItem = styled(AnswerItem)`\r\n    :hover{\r\n        cursor:pointer;\r\n    }\r\n    \r\n`;\r\n\r\nexport default AnswerItem;","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AnswerItem from \"./AnswerItem\";\r\nimport Preloader from \"./Preloader\";\r\n\r\nlet Answers = (props) => {\r\n    let [answers, setAnswers] = useState([]);\r\n    let [isFetching, setFetching] = useState(true);\r\n    let [answerItems, setAnswerItems] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getAnswers(props.question_id)\r\n\r\n    }, [props.question_id]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (answers) {\r\n            setAnswerItems(answers.map(answer => {\r\n                return <AnswerItem answer_id={answer.answer_id} answer_text={answer.answer_text}\r\n                                   onClick={(event) => {\r\n                                       props.answerChoiceHandler(answer.answer_id);\r\n                                       console.log(answer.answer_id);\r\n                                   }}\r\n                                   chosen={answer.answer_id === +props.chosenAnswerId}\r\n                />\r\n            }))\r\n        } else {\r\n            setAnswerItems(null);\r\n        }\r\n    }, [answers, props.chosenAnswerId]);\r\n\r\n    const getAnswers = (question_id) => {\r\n        console.log(\"props\");\r\n        console.log(props);\r\n        console.log(\"Fetching answers for question \" + question_id);\r\n        if (question_id) {\r\n            return fetch('/api/answers/' + question_id)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log(result);\r\n                    setAnswers(result);\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            return [];\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isFetching||props.isChosenFetching ? <Preloader/> : answerItems}\r\n        </div>\r\n    );\r\n};\r\n\r\nAnswers = styled(Answers)`\r\n\r\n`;\r\n\r\nexport default Answers;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nlet Pages = (props) => {\r\n    return <div className={props.className}>\r\n        {props.currentPage}/{props.totalPages}\r\n    </div>\r\n};\r\n\r\nPages = styled(Pages)`\r\n    padding: 15px;\r\n    color: '#5e5e5e';\r\n    font-style:italic;\r\n    text-align: left;\r\n`;\r\n\r\nexport default Pages;","import React, {useEffect, useState} from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Question from \"./Question\";\r\nimport Button from \"../StyledComponents/Button\";\r\nimport Preloader from \"../StyledComponents/Preloader\";\r\nimport Answers from \"../StyledComponents/Answers\";\r\nimport Pages from \"../StyledComponents/Pages\";\r\n\r\nconst Test = (props) => {\r\n\r\n        let [sessionId, setSessionId] = useState(null);\r\n        let [isLastQuestion, setIsLastQuestion] = useState(false);\r\n        let [questions, setQuestions] = useState([]);\r\n        let [isFetching, setFetching] = useState(false);\r\n        let [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n        let [chosenAnswerId, setChosenAnswerId] = useState(null);\r\n        let [isPrevButtonDisabled, setPrevButtonDisabled] = useState(false);\r\n        let [isChosenAnswerFetching, setChosenAnswerFetching] = useState(false);\r\n\r\n\r\n        const getChosenAnswer = (question_id) => {\r\n            setChosenAnswerFetching(true);\r\n            console.log(\"Trying to fetch chosen answers. Session id :\" + sessionId +\r\n                ', chosen answer id: ' + chosenAnswerId +\r\n                'question id: ' + question_id\r\n            );\r\n            if (sessionId && !chosenAnswerId) {\r\n                console.log(\"Fetching chosen answer\");\r\n                return fetch('/api/history/answers/' + sessionId + '/' + question_id)\r\n                    .then(response => response.json())\r\n                    .then(result => {\r\n                        console.log(\"Got the chosen answer from history\");\r\n                        console.log(result);\r\n                        setChosenAnswerId(result[0].answer_id);\r\n                        setChosenAnswerFetching(false);\r\n                        return result;\r\n                    })\r\n                    .catch(err => {\r\n                        console.log('Couldn\\'t get the chosen answer from the server');\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        };\r\n\r\n        const getSessionId = () => {\r\n            setFetching(true);\r\n            console.log('/api/session/' + props.user_id);\r\n            return fetch('/api/session/' + props.user_id)\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    if (result)\r\n                        props.updateSessionId(result.session_id);\r\n                    setFetching(false);\r\n                    return result.session_id;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const getQuestions = () => {\r\n            setFetching(true);\r\n            console.log('Getting questions');\r\n            return fetch('/api/questions')\r\n                .then(response => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then(result => {\r\n                    console.log('questions result');\r\n                    console.log(result);\r\n                    if (result) {\r\n                        props.updateQuestions(result);\r\n                        setQuestions(result);\r\n                    }\r\n                    setFetching(false);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n        const handleAnswerChoice = (answer_id) => {\r\n            setChosenAnswerId(answer_id);\r\n        };\r\n\r\n        const putAnswer = (data) => {\r\n            console.log('client put body');\r\n            console.log(JSON.stringify(data));\r\n            fetch('/api/answer',\r\n                {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify(data),\r\n                    headers: {\r\n                        'Content-Type': 'application/json;charset=utf-8'\r\n                    }\r\n                })\r\n                .then(response => response.json())\r\n                .then(result => {\r\n                    console.log(result);\r\n                    return result;\r\n                })\r\n                .catch(err => console.log(err));\r\n        };\r\n\r\n\r\n        const nextQuestionHandler = () => {\r\n            if (questions)\r\n                if (currentQuestionIndex < questions.length - 1) {\r\n                    if (chosenAnswerId) {\r\n                        putAnswer({\r\n                            session_id: props.session_id,\r\n                            answer_id: chosenAnswerId,\r\n                            question_id: questions[currentQuestionIndex].question_id\r\n                        });\r\n                    }\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n        };\r\n        const prevQuestionHandler = () => {\r\n            if (questions)\r\n                if (currentQuestionIndex > 0) {\r\n                    if (chosenAnswerId) {\r\n                        putAnswer({\r\n                            session_id: props.session_id,\r\n                            answer_id: chosenAnswerId,\r\n                            question_id: questions[currentQuestionIndex].question_id\r\n                        });\r\n                    }\r\n                    setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n                    setChosenAnswerId(null);\r\n                }\r\n        };\r\n\r\n        useEffect(() => {\r\n            setSessionId(props.session_id);\r\n        }, [props.session_id]);\r\n\r\n        useEffect(() => {\r\n            setPrevButtonDisabled(currentQuestionIndex === 0);\r\n        }, [currentQuestionIndex]);\r\n\r\n        useEffect(() => {\r\n            getSessionId();\r\n            getQuestions();\r\n        }, [props]);\r\n\r\n\r\n        useEffect(() => {\r\n            if (questions.length > 0 && currentQuestionIndex !== undefined) {\r\n                console.log('Getting chosen answer')\r\n                console.log(questions);\r\n                console.log(currentQuestionIndex);\r\n                getChosenAnswer(questions[currentQuestionIndex].question_id);\r\n            }\r\n\r\n        }, [sessionId, currentQuestionIndex, questions]);\r\n\r\n        let questionItems = questions.map(question => <Question primary session_id={props.session_id}\r\n                                                                question_id={question.question_id}\r\n                                                                question_text={question.question_text}\r\n                                                                questions_picture={question.question_picture}/>)\r\n\r\n        return (\r\n            <div>\r\n                {/*<Switch>\r\n                <Route path={'/:question_id'} render={(p) => <Question session_id = {props.session_id} question_id={p.match.params.question_id} lastQuestionHandler={setIsLastQuestion} />}/>\r\n            </Switch>*/}\r\n\r\n                {isFetching ? <Preloader/> :\r\n                    <div>\r\n                        <Pages currentPage={currentQuestionIndex + 1} totalPages={questions.length}/>\r\n                        {questionItems[currentQuestionIndex]}\r\n                    </div>}\r\n                <Answers question_id={questions.length > 0 ? questions[currentQuestionIndex].question_id : \"\"}\r\n                         answerChoiceHandler={handleAnswerChoice}\r\n                         chosenAnswerId={chosenAnswerId} isChosenFetching={isChosenAnswerFetching}  />\r\n                {isFetching ? null :\r\n                    <div>\r\n                        <Button onClick={prevQuestionHandler} disabled={isPrevButtonDisabled}>\r\n                            Назад\r\n                        </Button>\r\n                        <Button primary={currentQuestionIndex === questions.length - 1}\r\n                                onClick={nextQuestionHandler}>\r\n                            {currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Вперед'}\r\n                        </Button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Test;","export const UPDATE_SESSION_ID = 'UPDATE-SESSION-ID';\r\n\r\nconst initialState = {\r\n    session_id:null\r\n};\r\n\r\nconst sessionInfoReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case UPDATE_SESSION_ID:\r\n            return {\r\n                session_id: action.session_id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default sessionInfoReducer;","import {UPDATE_SESSION_ID} from \"../reducers/session-info-reducer\";\r\n\r\nconst updateSessionIdActionCreator = (session_id) => {\r\n    return {\r\n        type: UPDATE_SESSION_ID,\r\n        session_id\r\n    }\r\n};\r\n\r\nexport default updateSessionIdActionCreator;","export const UPDATE_QUESTIONS = 'UPDATE-QUESTIONS';\r\n\r\nconst questionsReducer = (state = [], action) => {\r\n    switch(action.type){\r\n        case UPDATE_QUESTIONS:\r\n            return action.questions;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default questionsReducer;","import {UPDATE_QUESTIONS} from \"../reducers/questions-reducer\";\r\n\r\nconst updateQuestionsActionCreator = (questions) => {\r\n    return{\r\n        type: UPDATE_QUESTIONS,\r\n        questions\r\n    }\r\n};\r\n\r\nexport default updateQuestionsActionCreator;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Test from \"../Components/Test\";\r\nimport updateSessionIdActionCreator from \"../redux/action-creators/session-info-action-creators\";\r\nimport updateQuestionsActionCreator from \"../redux/action-creators/questions-action-creators\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        session_id: state.sessionInfo.session_id,\r\n        user_id: state.userInfo.user_id\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateSessionId: (session_id) => {\r\n            dispatch(updateSessionIdActionCreator(session_id));\r\n        },\r\n        updateQuestions: (questions) => {\r\n            dispatch(updateQuestionsActionCreator(questions));\r\n        },\r\n    };\r\n};\r\n\r\nconst TestContainer = connect(mapStateToProps, mapDispatchToProps)(Test);\r\n\r\nexport default TestContainer;","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Logo = (props) => {\r\n    return(\r\n        <img className={props.className} src={'/images/Tempermeter_loader.svg'} />\r\n    );\r\n};\r\n\r\nconst FullScreenLogo = styled(Logo)`\r\n    width:100%;\r\n`;\r\n\r\nexport default FullScreenLogo;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Header from \"./StyledComponents/Header\";\r\nimport HeaderLogo from \"./StyledComponents/HeaderLogo\";\r\nimport FAIcon from \"./StyledComponents/FAIcon\";\r\nimport {faInfoCircle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport Main from \"./StyledComponents/Main\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport HomeContainer from \"./ContainerComponents/HomeContainer\";\r\nimport TestContainer from \"./ContainerComponents/TestContainer\";\r\nimport Preloader from \"./StyledComponents/Preloader\";\r\nimport FullScreenLogo from \"./StyledComponents/FullScreenLogo\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div>\r\n            <Header>\r\n                <HeaderLogo src=\"images/Tempermeter-logo.svg\" alt={\"Tempermeter logo\"}/>\r\n                <FAIcon icon = {faInfoCircle}  />\r\n\r\n            </Header>\r\n            <Main>\r\n                <Switch>\r\n                    <Route path={\"/home\"} render = {() => <HomeContainer/>} />\r\n                    <Route path={\"/test/:question_id\"} render={() => <TestContainer /> } />\r\n                </Switch>\r\n            </Main>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport resultsHistoryReducer from \"./reducers/results-history-reducer\";\r\nimport userInfoReducer from \"./reducers/user-info-reducer\";\r\nimport sessionInfoReducer from \"./reducers/session-info-reducer\";\r\nimport questionsReducer from \"./reducers/questions-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    resultsHistory: resultsHistoryReducer,\r\n    userInfo: userInfoReducer,\r\n    sessionInfo: sessionInfoReducer,\r\n    questions: questionsReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store = {store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}